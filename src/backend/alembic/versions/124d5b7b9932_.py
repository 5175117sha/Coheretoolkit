"""empty message

Revision ID: 124d5b7b9932
Revises: 117f0d9b1d3d
Create Date: 2024-08-05 09:08:51.728854

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "124d5b7b9932"
down_revision: Union[str, None] = "117f0d9b1d3d"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "tools",
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("display_name", sa.Text(), nullable=False),
        sa.Column("implementation_class_name", sa.Text(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("parameter_definitions", sa.JSON(), nullable=True),
        sa.Column("kwargs", sa.JSON(), nullable=True),
        sa.Column("default_tool_config", sa.JSON(), nullable=True),
        sa.Column("is_visible", sa.Boolean(), nullable=False),
        sa.Column("is_community", sa.Boolean(), nullable=False),
        sa.Column("error_message_text", sa.Text(), nullable=True),
        sa.Column("category", sa.Text(), nullable=True),
        sa.Column("auth_implementation_class_name", sa.Text(), nullable=True),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name", name="tool_name_uc"),
    )
    op.create_table(
        "agent_tool",
        sa.Column("agent_id", sa.String(), nullable=False),
        sa.Column("tool_id", sa.String(), nullable=False),
        sa.Column("tool_config", sa.JSON(), nullable=True),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(["agent_id"], ["agents.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["tool_id"], ["tools.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("agent_id", "tool_id", name="agent_tool_uc"),
    )
    op.add_column(
        "agent_tool_metadata", sa.Column("tool_id", sa.String(), nullable=False)
    )
    op.drop_constraint(
        "_user_agent_tool_name_uc", "agent_tool_metadata", type_="unique"
    )
    op.create_unique_constraint(
        "_user_agent_tool_name_uc",
        "agent_tool_metadata",
        ["user_id", "agent_id", "tool_id"],
    )
    op.create_foreign_key(
        "metadata_tool_id_fkey",
        "agent_tool_metadata",
        "tools",
        ["tool_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_column("agent_tool_metadata", "tool_name")
    op.drop_column("agents", "tools")
    op.alter_column(
        "tool_auth",
        "tool_id",
        existing_type=sa.TEXT(),
        type_=sa.String(),
        nullable=True,
    )
    op.create_foreign_key(
        "metadata_tool_id_fkey",
        "tool_auth",
        "tools",
        ["tool_id"],
        ["id"],
        ondelete="CASCADE",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("metadata_tool_id_fkey", "tool_auth", type_="foreignkey")
    op.alter_column(
        "tool_auth",
        "tool_id",
        existing_type=sa.String(),
        type_=sa.TEXT(),
        nullable=False,
    )
    op.add_column(
        "agents",
        sa.Column(
            "tools",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "agent_tool_metadata",
        sa.Column("tool_name", sa.TEXT(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(
        "metadata_tool_id_fkey", "agent_tool_metadata", type_="foreignkey"
    )
    op.drop_constraint(
        "_user_agent_tool_name_uc", "agent_tool_metadata", type_="unique"
    )
    op.create_unique_constraint(
        "_user_agent_tool_name_uc",
        "agent_tool_metadata",
        ["user_id", "agent_id", "tool_name"],
    )
    op.drop_column("agent_tool_metadata", "tool_id")
    op.drop_table("agent_tool")
    op.drop_table("tools")
    # ### end Alembic commands ###
